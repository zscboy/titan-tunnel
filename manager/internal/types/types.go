// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4

package types

type CreateUserReq struct {
	UserName     string        `json:"user_name"`
	Password     string        `json:"password"`
	PopId        string        `json:"pop_id"`
	TrafficLimit *TrafficLimit `json:"traffic_limit,optional"`
	Route        *Route        `json:"route,optional"`
}

type CreateUserResp struct {
	UserName     string        `json:"user_name"`
	PopId        string        `json:"pop_id"`
	TrafficLimit *TrafficLimit `json:"traffic_limit"`
	Route        *Route        `json:"route"`
	NodeIP       string        `json:"node_ip"`
}

type DeleteUserReq struct {
	UserName string `json:"user_name"`
}

type GetNodePopReq struct {
	NodeId string `form:"nodeid"`
}

type GetNodePopResp struct {
	ServerURL   string `json:"server_url"`
	AccessToken string `json:"access_token"`
}

type GetPopsResp struct {
	Pops []*Pop
}

type GetUserReq struct {
	UserName string `form:"username"`
}

type GetUserResp struct {
	UserName       string        `json:"user_name"`
	PopId          string        `json:"pop_id"`
	TrafficLimit   *TrafficLimit `json:"traffic_limit"`
	Route          *Route        `json:"route"`
	NodeIP         string        `json:"node_ip"`
	NodeOnline     bool          `json:"node_online"`
	CurrentTraffic int64         `json:"current_traffic"`
	Off            bool          `json:"off"`
}

type ListNodeReq struct {
	PopID string `form:"popid"`
	Type  int    `form:"type"`
	Start int    `form:"start"`
	End   int    `form:"end"`
}

type ListNodeResp struct {
	Nodes []*Node `json:"nodes"`
	Total int     `json:"total"`
}

type ListUserReq struct {
	PopID string `form:"popid"`
	Start int    `form:"start"`
	End   int    `form:"end"`
}

type ListUserResp struct {
	Users []*User `json:"users"`
	Total int     `json:"total"`
}

type ModifyUserPasswordReq struct {
	UserName    string `json:"user_name"`
	NewPassword string `json:"new_password"`
}

type ModifyUserReq struct {
	UserName     string        `json:"user_name"`
	TrafficLimit *TrafficLimit `json:"total_traffic"`
	Route        *Route        `json:"route"`
}

type Node struct {
	Id       string `json:"id"`
	IP       string `json:"ip"`
	NetDelay int    `json:"net_delay"`
	BindUser string `json:"bind_user"`
	Online   bool   `json:"online"`
}

type Pop struct {
	ID         string `json:"id"`
	Area       string `json:"area"`
	Socks5Addr string `json:"socks5_addr"`
	TotalNode  int    `json:"total_node"`
}

type Route struct {
	Mode      int
	NodeID    string
	Intervals int
}

type StartOrStopUserReq struct {
	UserName string `json:"user_name"`
	Action   string `json:"action"`
}

type SwitchUserRouteNodeReq struct {
	UserName string `json:"user_name"`
	NodeId   string `json:"node_id, optional"`
}

type TrafficLimit struct {
	StartTime    int64 `json:"start_time"`
	EndTime      int64 `json:"end_time"`
	TotalTraffic int64 `json:"total_traffic"`
}

type User struct {
	UserName       string        `json:"user_name"`
	TrafficLimit   *TrafficLimit `json:"traffic_limit"`
	Route          *Route        `json:"route"`
	NodeIP         string        `json:"node_ip"`
	NodeOnline     bool          `json:"node_online"`
	CurrentTraffic int64         `json:"current_traffic"`
	Off            bool          `json:"off"`
}

type UserOperationResp struct {
	Success bool   `json:"success"`
	ErrMsg  string `json:"err_msg"`
}
