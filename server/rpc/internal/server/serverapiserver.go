// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: server.proto

package server

import (
	"context"

	"titan-tunnel/server/rpc/internal/logic"
	"titan-tunnel/server/rpc/internal/svc"
	"titan-tunnel/server/rpc/pb"
)

type ServerAPIServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedServerAPIServer
}

func NewServerAPIServer(svcCtx *svc.ServiceContext) *ServerAPIServer {
	return &ServerAPIServer{
		svcCtx: svcCtx,
	}
}

func (s *ServerAPIServer) ListNode(ctx context.Context, in *pb.ListNodeReq) (*pb.ListNodeResp, error) {
	l := logic.NewListNodeLogic(ctx, s.svcCtx)
	return l.ListNode(in)
}

func (s *ServerAPIServer) CreateUser(ctx context.Context, in *pb.CreateUserReq) (*pb.CreateUserResp, error) {
	l := logic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

func (s *ServerAPIServer) ListUser(ctx context.Context, in *pb.ListUserReq) (*pb.ListUserResp, error) {
	l := logic.NewListUserLogic(ctx, s.svcCtx)
	return l.ListUser(in)
}

func (s *ServerAPIServer) ModifyUserPassword(ctx context.Context, in *pb.ModifyUserPasswordReq) (*pb.UserOperationResp, error) {
	l := logic.NewModifyUserPasswordLogic(ctx, s.svcCtx)
	return l.ModifyUserPassword(in)
}

func (s *ServerAPIServer) ModifyUser(ctx context.Context, in *pb.ModifyUserReq) (*pb.UserOperationResp, error) {
	l := logic.NewModifyUserLogic(ctx, s.svcCtx)
	return l.ModifyUser(in)
}

func (s *ServerAPIServer) GetUser(ctx context.Context, in *pb.GetUserReq) (*pb.User, error) {
	l := logic.NewGetUserLogic(ctx, s.svcCtx)
	return l.GetUser(in)
}

func (s *ServerAPIServer) DeleteUser(ctx context.Context, in *pb.DeleteUserReq) (*pb.UserOperationResp, error) {
	l := logic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

func (s *ServerAPIServer) SwitchUserRouteNode(ctx context.Context, in *pb.SwitchUserRouteNodeReq) (*pb.UserOperationResp, error) {
	l := logic.NewSwitchUserRouteNodeLogic(ctx, s.svcCtx)
	return l.SwitchUserRouteNode(in)
}

func (s *ServerAPIServer) StartOrStopUser(ctx context.Context, in *pb.StartOrStopUserReq) (*pb.UserOperationResp, error) {
	l := logic.NewStartOrStopUserLogic(ctx, s.svcCtx)
	return l.StartOrStopUser(in)
}

func (s *ServerAPIServer) GetServerInfo(ctx context.Context, in *pb.Empty) (*pb.GetServerInfoResp, error) {
	l := logic.NewGetServerInfoLogic(ctx, s.svcCtx)
	return l.GetServerInfo(in)
}

func (s *ServerAPIServer) GetNodeAccessToken(ctx context.Context, in *pb.GetNodeAccessTokenReq) (*pb.GetNodeAccessTokenResp, error) {
	l := logic.NewGetNodeAccessTokenLogic(ctx, s.svcCtx)
	return l.GetNodeAccessToken(in)
}
