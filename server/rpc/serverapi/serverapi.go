// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: server.proto

package serverapi

import (
	"context"

	"titan-tunnel/server/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateUserReq          = pb.CreateUserReq
	CreateUserResp         = pb.CreateUserResp
	DeleteUserReq          = pb.DeleteUserReq
	Empty                  = pb.Empty
	GetServerInfoResp      = pb.GetServerInfoResp
	GetUserReq             = pb.GetUserReq
	GetUserResp            = pb.GetUserResp
	ListNodeReq            = pb.ListNodeReq
	ListNodeResp           = pb.ListNodeResp
	ListUserReq            = pb.ListUserReq
	ListUserResp           = pb.ListUserResp
	ModifyUserPasswordReq  = pb.ModifyUserPasswordReq
	ModifyUserReq          = pb.ModifyUserReq
	Node                   = pb.Node
	Route                  = pb.Route
	StartOrStopUserReq     = pb.StartOrStopUserReq
	SwitchUserRouteNodeReq = pb.SwitchUserRouteNodeReq
	TrafficLimit           = pb.TrafficLimit
	User                   = pb.User
	UserOperationResp      = pb.UserOperationResp

	ServerAPI interface {
		ListNode(ctx context.Context, in *ListNodeReq, opts ...grpc.CallOption) (*ListNodeResp, error)
		CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error)
		ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserResp, error)
		ModifyUserPassword(ctx context.Context, in *ModifyUserPasswordReq, opts ...grpc.CallOption) (*UserOperationResp, error)
		ModifyUser(ctx context.Context, in *ModifyUserReq, opts ...grpc.CallOption) (*UserOperationResp, error)
		GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
		DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*UserOperationResp, error)
		SwitchUserRouteNode(ctx context.Context, in *SwitchUserRouteNodeReq, opts ...grpc.CallOption) (*UserOperationResp, error)
		StartOrStopUser(ctx context.Context, in *StartOrStopUserReq, opts ...grpc.CallOption) (*UserOperationResp, error)
		GetServerInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetServerInfoResp, error)
	}

	defaultServerAPI struct {
		cli zrpc.Client
	}
)

func NewServerAPI(cli zrpc.Client) ServerAPI {
	return &defaultServerAPI{
		cli: cli,
	}
}

func (m *defaultServerAPI) ListNode(ctx context.Context, in *ListNodeReq, opts ...grpc.CallOption) (*ListNodeResp, error) {
	client := pb.NewServerAPIClient(m.cli.Conn())
	return client.ListNode(ctx, in, opts...)
}

func (m *defaultServerAPI) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error) {
	client := pb.NewServerAPIClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultServerAPI) ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserResp, error) {
	client := pb.NewServerAPIClient(m.cli.Conn())
	return client.ListUser(ctx, in, opts...)
}

func (m *defaultServerAPI) ModifyUserPassword(ctx context.Context, in *ModifyUserPasswordReq, opts ...grpc.CallOption) (*UserOperationResp, error) {
	client := pb.NewServerAPIClient(m.cli.Conn())
	return client.ModifyUserPassword(ctx, in, opts...)
}

func (m *defaultServerAPI) ModifyUser(ctx context.Context, in *ModifyUserReq, opts ...grpc.CallOption) (*UserOperationResp, error) {
	client := pb.NewServerAPIClient(m.cli.Conn())
	return client.ModifyUser(ctx, in, opts...)
}

func (m *defaultServerAPI) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	client := pb.NewServerAPIClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultServerAPI) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*UserOperationResp, error) {
	client := pb.NewServerAPIClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

func (m *defaultServerAPI) SwitchUserRouteNode(ctx context.Context, in *SwitchUserRouteNodeReq, opts ...grpc.CallOption) (*UserOperationResp, error) {
	client := pb.NewServerAPIClient(m.cli.Conn())
	return client.SwitchUserRouteNode(ctx, in, opts...)
}

func (m *defaultServerAPI) StartOrStopUser(ctx context.Context, in *StartOrStopUserReq, opts ...grpc.CallOption) (*UserOperationResp, error) {
	client := pb.NewServerAPIClient(m.cli.Conn())
	return client.StartOrStopUser(ctx, in, opts...)
}

func (m *defaultServerAPI) GetServerInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetServerInfoResp, error) {
	client := pb.NewServerAPIClient(m.cli.Conn())
	return client.GetServerInfo(ctx, in, opts...)
}
