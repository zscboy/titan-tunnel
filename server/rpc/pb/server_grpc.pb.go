// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.7
// source: server.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServerAPI_ListNode_FullMethodName            = "/server.ServerAPI/ListNode"
	ServerAPI_CreateUser_FullMethodName          = "/server.ServerAPI/CreateUser"
	ServerAPI_ListUser_FullMethodName            = "/server.ServerAPI/ListUser"
	ServerAPI_ModifyUserPassword_FullMethodName  = "/server.ServerAPI/ModifyUserPassword"
	ServerAPI_ModifyUser_FullMethodName          = "/server.ServerAPI/ModifyUser"
	ServerAPI_GetUser_FullMethodName             = "/server.ServerAPI/GetUser"
	ServerAPI_DeleteUser_FullMethodName          = "/server.ServerAPI/DeleteUser"
	ServerAPI_SwitchUserRouteNode_FullMethodName = "/server.ServerAPI/SwitchUserRouteNode"
	ServerAPI_StartOrStopUser_FullMethodName     = "/server.ServerAPI/StartOrStopUser"
)

// ServerAPIClient is the client API for ServerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerAPIClient interface {
	ListNode(ctx context.Context, in *ListNodeReq, opts ...grpc.CallOption) (*ListNodeResp, error)
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error)
	ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserResp, error)
	ModifyUserPassword(ctx context.Context, in *ModifyUserPasswordReq, opts ...grpc.CallOption) (*UserOperationResp, error)
	ModifyUser(ctx context.Context, in *ModifyUserReq, opts ...grpc.CallOption) (*UserOperationResp, error)
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*UserOperationResp, error)
	SwitchUserRouteNode(ctx context.Context, in *SwitchUserRouteNodeReq, opts ...grpc.CallOption) (*UserOperationResp, error)
	StartOrStopUser(ctx context.Context, in *StartOrStopUserReq, opts ...grpc.CallOption) (*UserOperationResp, error)
}

type serverAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewServerAPIClient(cc grpc.ClientConnInterface) ServerAPIClient {
	return &serverAPIClient{cc}
}

func (c *serverAPIClient) ListNode(ctx context.Context, in *ListNodeReq, opts ...grpc.CallOption) (*ListNodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNodeResp)
	err := c.cc.Invoke(ctx, ServerAPI_ListNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAPIClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResp)
	err := c.cc.Invoke(ctx, ServerAPI_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAPIClient) ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserResp)
	err := c.cc.Invoke(ctx, ServerAPI_ListUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAPIClient) ModifyUserPassword(ctx context.Context, in *ModifyUserPasswordReq, opts ...grpc.CallOption) (*UserOperationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserOperationResp)
	err := c.cc.Invoke(ctx, ServerAPI_ModifyUserPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAPIClient) ModifyUser(ctx context.Context, in *ModifyUserReq, opts ...grpc.CallOption) (*UserOperationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserOperationResp)
	err := c.cc.Invoke(ctx, ServerAPI_ModifyUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAPIClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResp)
	err := c.cc.Invoke(ctx, ServerAPI_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAPIClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*UserOperationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserOperationResp)
	err := c.cc.Invoke(ctx, ServerAPI_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAPIClient) SwitchUserRouteNode(ctx context.Context, in *SwitchUserRouteNodeReq, opts ...grpc.CallOption) (*UserOperationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserOperationResp)
	err := c.cc.Invoke(ctx, ServerAPI_SwitchUserRouteNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAPIClient) StartOrStopUser(ctx context.Context, in *StartOrStopUserReq, opts ...grpc.CallOption) (*UserOperationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserOperationResp)
	err := c.cc.Invoke(ctx, ServerAPI_StartOrStopUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerAPIServer is the server API for ServerAPI service.
// All implementations must embed UnimplementedServerAPIServer
// for forward compatibility.
type ServerAPIServer interface {
	ListNode(context.Context, *ListNodeReq) (*ListNodeResp, error)
	CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error)
	ListUser(context.Context, *ListUserReq) (*ListUserResp, error)
	ModifyUserPassword(context.Context, *ModifyUserPasswordReq) (*UserOperationResp, error)
	ModifyUser(context.Context, *ModifyUserReq) (*UserOperationResp, error)
	GetUser(context.Context, *GetUserReq) (*GetUserResp, error)
	DeleteUser(context.Context, *DeleteUserReq) (*UserOperationResp, error)
	SwitchUserRouteNode(context.Context, *SwitchUserRouteNodeReq) (*UserOperationResp, error)
	StartOrStopUser(context.Context, *StartOrStopUserReq) (*UserOperationResp, error)
	mustEmbedUnimplementedServerAPIServer()
}

// UnimplementedServerAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServerAPIServer struct{}

func (UnimplementedServerAPIServer) ListNode(context.Context, *ListNodeReq) (*ListNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNode not implemented")
}
func (UnimplementedServerAPIServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedServerAPIServer) ListUser(context.Context, *ListUserReq) (*ListUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedServerAPIServer) ModifyUserPassword(context.Context, *ModifyUserPasswordReq) (*UserOperationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyUserPassword not implemented")
}
func (UnimplementedServerAPIServer) ModifyUser(context.Context, *ModifyUserReq) (*UserOperationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyUser not implemented")
}
func (UnimplementedServerAPIServer) GetUser(context.Context, *GetUserReq) (*GetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedServerAPIServer) DeleteUser(context.Context, *DeleteUserReq) (*UserOperationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedServerAPIServer) SwitchUserRouteNode(context.Context, *SwitchUserRouteNodeReq) (*UserOperationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchUserRouteNode not implemented")
}
func (UnimplementedServerAPIServer) StartOrStopUser(context.Context, *StartOrStopUserReq) (*UserOperationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartOrStopUser not implemented")
}
func (UnimplementedServerAPIServer) mustEmbedUnimplementedServerAPIServer() {}
func (UnimplementedServerAPIServer) testEmbeddedByValue()                   {}

// UnsafeServerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerAPIServer will
// result in compilation errors.
type UnsafeServerAPIServer interface {
	mustEmbedUnimplementedServerAPIServer()
}

func RegisterServerAPIServer(s grpc.ServiceRegistrar, srv ServerAPIServer) {
	// If the following call pancis, it indicates UnimplementedServerAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServerAPI_ServiceDesc, srv)
}

func _ServerAPI_ListNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAPIServer).ListNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerAPI_ListNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAPIServer).ListNode(ctx, req.(*ListNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerAPI_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAPIServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerAPI_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAPIServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerAPI_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAPIServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerAPI_ListUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAPIServer).ListUser(ctx, req.(*ListUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerAPI_ModifyUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyUserPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAPIServer).ModifyUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerAPI_ModifyUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAPIServer).ModifyUserPassword(ctx, req.(*ModifyUserPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerAPI_ModifyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAPIServer).ModifyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerAPI_ModifyUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAPIServer).ModifyUser(ctx, req.(*ModifyUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerAPI_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAPIServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerAPI_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAPIServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerAPI_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAPIServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerAPI_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAPIServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerAPI_SwitchUserRouteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchUserRouteNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAPIServer).SwitchUserRouteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerAPI_SwitchUserRouteNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAPIServer).SwitchUserRouteNode(ctx, req.(*SwitchUserRouteNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerAPI_StartOrStopUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartOrStopUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAPIServer).StartOrStopUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerAPI_StartOrStopUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAPIServer).StartOrStopUser(ctx, req.(*StartOrStopUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerAPI_ServiceDesc is the grpc.ServiceDesc for ServerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.ServerAPI",
	HandlerType: (*ServerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNode",
			Handler:    _ServerAPI_ListNode_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _ServerAPI_CreateUser_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _ServerAPI_ListUser_Handler,
		},
		{
			MethodName: "ModifyUserPassword",
			Handler:    _ServerAPI_ModifyUserPassword_Handler,
		},
		{
			MethodName: "ModifyUser",
			Handler:    _ServerAPI_ModifyUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ServerAPI_GetUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _ServerAPI_DeleteUser_Handler,
		},
		{
			MethodName: "SwitchUserRouteNode",
			Handler:    _ServerAPI_SwitchUserRouteNode_Handler,
		},
		{
			MethodName: "StartOrStopUser",
			Handler:    _ServerAPI_StartOrStopUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
