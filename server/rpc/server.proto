syntax = "proto3";

package server;
option go_package = "./pb";

import "google/protobuf/empty.proto";

// ---- Message Types ----
message ListNodeReq {
  string pop_id = 1;
  int32 type = 2;
  int32 start = 3;
  int32 end = 4;
}

message Node {
  string id = 1;
  string ip = 2;
  int32 net_delay = 3;
  string bind_user = 4;
  bool online = 5;
}

message ListNodeResp {
  repeated Node nodes = 1;
  int32 total = 2;
}

message Route {
  int32 mode = 1;
  string node_id = 2;
  int32 intervals = 3;
}

message TrafficLimit {
  int64 start_time = 1;
  int64 end_time = 2;
  int64 total_traffic = 3;
}

message CreateUserReq {
  string user_name = 1;
  string password = 2;
  string pop_id = 3;
  TrafficLimit traffic_limit = 4;
  Route route = 5;
}

message CreateUserResp {
  string user_name = 1;
  string pop_id = 2;
  TrafficLimit traffic_limit = 3;
  Route route = 4;
  string node_ip = 5;
}

message UserOperationResp {
  bool success = 1;
  string err_msg = 2;
}

message ModifyUserPasswordReq {
  string user_name = 1;
  string new_password = 2;
}

message ModifyUserReq {
  string user_name = 1;
  string pop_id = 2;
  TrafficLimit traffic_limit = 3;
  Route route = 4;
}

message GetUserReq {
  string user_name = 1;
}

message GetUserResp {
  string user_name = 1;
  string pop_id = 2;
  TrafficLimit traffic_limit = 3;
  Route route = 4;
  string node_ip = 5;
}

message SwitchUserRouteNodeReq {
  string user_name = 1;
  string node_id = 2;
}

message DeleteUserReq {
  string user_name = 1;
}

message StartOrStopUserReq {
  string user_name = 1;
  string action = 2;
}

message User {
  string user_name = 1;
  TrafficLimit traffic_limit = 2;
  Route route = 3;
  string node_ip = 4;
  int64 current_traffic = 5;
  bool off = 6;
}

message ListUserReq {
  string pop_id = 1;
  int32 start = 2;
  int32 end = 3;
}

message ListUserResp {
  repeated User users = 1;
  int32 total = 2;
}

message Empty {}

// ---- Service Definition ----

service ServerAPI {
  rpc ListNode(ListNodeReq) returns (ListNodeResp);
  rpc CreateUser(CreateUserReq) returns (CreateUserResp);
  rpc ListUser(ListUserReq) returns (ListUserResp);
  rpc ModifyUserPassword(ModifyUserPasswordReq) returns (UserOperationResp);
  rpc ModifyUser(ModifyUserReq) returns (UserOperationResp);
  rpc GetUser(GetUserReq) returns (GetUserResp);
  rpc DeleteUser(DeleteUserReq) returns (UserOperationResp);
  rpc SwitchUserRouteNode(SwitchUserRouteNodeReq) returns (UserOperationResp);
  rpc StartOrStopUser(StartOrStopUserReq) returns (UserOperationResp);
}
