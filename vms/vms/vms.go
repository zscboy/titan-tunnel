// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: vms.proto

package vms

import (
	"context"

	"titan-vm/vms/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateVMRequest              = pb.CreateVMRequest
	CreateVMWithLibvirtRequest   = pb.CreateVMWithLibvirtRequest
	CreateVMWithMultipassRequest = pb.CreateVMWithMultipassRequest
	CreateVolWithLibvirtReqeust  = pb.CreateVolWithLibvirtReqeust
	CreateVolWithLibvirtResponse = pb.CreateVolWithLibvirtResponse
	DeleteVMRequest              = pb.DeleteVMRequest
	GetNodeRequest               = pb.GetNodeRequest
	GetNodeResponse              = pb.GetNodeResponse
	GetVolRequest                = pb.GetVolRequest
	GetVolResponse               = pb.GetVolResponse
	ListImageRequest             = pb.ListImageRequest
	ListImageResponse            = pb.ListImageResponse
	ListNodeRequest              = pb.ListNodeRequest
	ListNodeResponse             = pb.ListNodeResponse
	ListVMInstanceReqeust        = pb.ListVMInstanceReqeust
	ListVMInstanceResponse       = pb.ListVMInstanceResponse
	MultipassExecRequest         = pb.MultipassExecRequest
	MultipassExecResponse        = pb.MultipassExecResponse
	Node                         = pb.Node
	StartVMRequest               = pb.StartVMRequest
	StopVMRequest                = pb.StopVMRequest
	UpdateVMRequest              = pb.UpdateVMRequest
	VMInfo                       = pb.VMInfo
	VMOperationResponse          = pb.VMOperationResponse

	Vms interface {
		// Libvirt
		CreateVMWithLibvirt(ctx context.Context, in *CreateVMWithLibvirtRequest, opts ...grpc.CallOption) (*VMOperationResponse, error)
		CreateVolWithLibvirt(ctx context.Context, in *CreateVolWithLibvirtReqeust, opts ...grpc.CallOption) (*CreateVolWithLibvirtResponse, error)
		GetVol(ctx context.Context, in *GetVolRequest, opts ...grpc.CallOption) (*GetVolResponse, error)
		// common
		CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*VMOperationResponse, error)
		StartVM(ctx context.Context, in *StartVMRequest, opts ...grpc.CallOption) (*VMOperationResponse, error)
		StopVM(ctx context.Context, in *StopVMRequest, opts ...grpc.CallOption) (*VMOperationResponse, error)
		DeleteVM(ctx context.Context, in *DeleteVMRequest, opts ...grpc.CallOption) (*VMOperationResponse, error)
		ListVMInstance(ctx context.Context, in *ListVMInstanceReqeust, opts ...grpc.CallOption) (*ListVMInstanceResponse, error)
		ListImage(ctx context.Context, in *ListImageRequest, opts ...grpc.CallOption) (*ListImageResponse, error)
		// not implement now
		UpdateVM(ctx context.Context, in *UpdateVMRequest, opts ...grpc.CallOption) (*VMOperationResponse, error)
		// Multipass
		CreateVMWithMultipass(ctx context.Context, in *CreateVMWithMultipassRequest, opts ...grpc.CallOption) (*VMOperationResponse, error)
		MultipassExec(ctx context.Context, in *MultipassExecRequest, opts ...grpc.CallOption) (*MultipassExecResponse, error)
		// node
		ListNode(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodeResponse, error)
		GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	}

	defaultVms struct {
		cli zrpc.Client
	}
)

func NewVms(cli zrpc.Client) Vms {
	return &defaultVms{
		cli: cli,
	}
}

// Libvirt
func (m *defaultVms) CreateVMWithLibvirt(ctx context.Context, in *CreateVMWithLibvirtRequest, opts ...grpc.CallOption) (*VMOperationResponse, error) {
	client := pb.NewVmsClient(m.cli.Conn())
	return client.CreateVMWithLibvirt(ctx, in, opts...)
}

func (m *defaultVms) CreateVolWithLibvirt(ctx context.Context, in *CreateVolWithLibvirtReqeust, opts ...grpc.CallOption) (*CreateVolWithLibvirtResponse, error) {
	client := pb.NewVmsClient(m.cli.Conn())
	return client.CreateVolWithLibvirt(ctx, in, opts...)
}

func (m *defaultVms) GetVol(ctx context.Context, in *GetVolRequest, opts ...grpc.CallOption) (*GetVolResponse, error) {
	client := pb.NewVmsClient(m.cli.Conn())
	return client.GetVol(ctx, in, opts...)
}

// common
func (m *defaultVms) CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*VMOperationResponse, error) {
	client := pb.NewVmsClient(m.cli.Conn())
	return client.CreateVM(ctx, in, opts...)
}

func (m *defaultVms) StartVM(ctx context.Context, in *StartVMRequest, opts ...grpc.CallOption) (*VMOperationResponse, error) {
	client := pb.NewVmsClient(m.cli.Conn())
	return client.StartVM(ctx, in, opts...)
}

func (m *defaultVms) StopVM(ctx context.Context, in *StopVMRequest, opts ...grpc.CallOption) (*VMOperationResponse, error) {
	client := pb.NewVmsClient(m.cli.Conn())
	return client.StopVM(ctx, in, opts...)
}

func (m *defaultVms) DeleteVM(ctx context.Context, in *DeleteVMRequest, opts ...grpc.CallOption) (*VMOperationResponse, error) {
	client := pb.NewVmsClient(m.cli.Conn())
	return client.DeleteVM(ctx, in, opts...)
}

func (m *defaultVms) ListVMInstance(ctx context.Context, in *ListVMInstanceReqeust, opts ...grpc.CallOption) (*ListVMInstanceResponse, error) {
	client := pb.NewVmsClient(m.cli.Conn())
	return client.ListVMInstance(ctx, in, opts...)
}

func (m *defaultVms) ListImage(ctx context.Context, in *ListImageRequest, opts ...grpc.CallOption) (*ListImageResponse, error) {
	client := pb.NewVmsClient(m.cli.Conn())
	return client.ListImage(ctx, in, opts...)
}

// not implement now
func (m *defaultVms) UpdateVM(ctx context.Context, in *UpdateVMRequest, opts ...grpc.CallOption) (*VMOperationResponse, error) {
	client := pb.NewVmsClient(m.cli.Conn())
	return client.UpdateVM(ctx, in, opts...)
}

// Multipass
func (m *defaultVms) CreateVMWithMultipass(ctx context.Context, in *CreateVMWithMultipassRequest, opts ...grpc.CallOption) (*VMOperationResponse, error) {
	client := pb.NewVmsClient(m.cli.Conn())
	return client.CreateVMWithMultipass(ctx, in, opts...)
}

func (m *defaultVms) MultipassExec(ctx context.Context, in *MultipassExecRequest, opts ...grpc.CallOption) (*MultipassExecResponse, error) {
	client := pb.NewVmsClient(m.cli.Conn())
	return client.MultipassExec(ctx, in, opts...)
}

// node
func (m *defaultVms) ListNode(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodeResponse, error) {
	client := pb.NewVmsClient(m.cli.Conn())
	return client.ListNode(ctx, in, opts...)
}

func (m *defaultVms) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	client := pb.NewVmsClient(m.cli.Conn())
	return client.GetNode(ctx, in, opts...)
}
